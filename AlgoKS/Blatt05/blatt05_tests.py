import pathlib
from fractions import Fraction
import numpy as np
import testsuite as ts


sheet = ts.Sheet(
    5,
    tasks=[
        ts.Task(
            1,
            "imgutils",
            description="Hilfsfunktionen",
            allowed_imports={"numpy", "matplotlib.pyplot"},
            subtasks=[
                ts.Subtask(
                    "a",
                    marks=Fraction(3, 2),
                    function_name="image2pixels",
                    description="Pixelliste erzeugen",
                    test_cases=[
                        ts.TestCase(
                            (np.array([[[0, 0, 0]]], dtype="uint8"),), [(0, 0, 0, 0, 0)]
                        ),
                        ts.TestCase(
                            (np.array([[[1, 2, 3]]], dtype="uint8"),), [(1, 2, 3, 0, 0)]
                        ),
                        ts.TestCase(
                            (np.array([[[1, 2, 3]], [[4, 5, 6]]], dtype="uint8"),),
                            [(1, 2, 3, 0, 0), (4, 5, 6, 0, 1)],
                        ),
                        ts.TestCase(
                            (
                                np.array(
                                    [[[255, 0, 0], [0, 255, 0], [0, 0, 255]]],
                                    dtype="uint8",
                                ),
                            ),
                            [(255, 0, 0, 0, 0), (0, 255, 0, 1, 0), (0, 0, 255, 2, 0)],
                        ),
                        ts.TestCase(
                            (
                                np.array(
                                    [
                                        [[0, 0, 0], [1, 0, 0]],
                                        [[0, 1, 0], [1, 1, 0]],
                                        [[0, 2, 0], [1, 2, 0]],
                                    ],
                                    dtype="uint8",
                                ),
                            ),
                            [
                                (0, 0, 0, 0, 0),
                                (1, 0, 0, 1, 0),
                                (0, 1, 0, 0, 1),
                                (1, 1, 0, 1, 1),
                                (0, 2, 0, 0, 2),
                                (1, 2, 0, 1, 2),
                            ],
                        ),
                        ts.TestCase(
                            (
                                np.array(
                                    [[[0, 0, 0], [1, 1, 1], [2, 2, 2]]], dtype="uint8"
                                ),
                            ),
                            [(0, 0, 0, 0, 0), (1, 1, 1, 1, 0), (2, 2, 2, 2, 0)],
                        ),
                        ts.TestCase(
                            (
                                np.array(
                                    [
                                        [[253, 0, 0], [254, 0, 0], [255, 0, 0]],
                                        [[0, 253, 0], [0, 254, 0], [0, 255, 0]],
                                        [[0, 0, 253], [0, 0, 254], [0, 0, 255]],
                                    ],
                                    dtype="uint8",
                                ),
                            ),
                            [
                                (253, 0, 0, 0, 0),
                                (254, 0, 0, 1, 0),
                                (255, 0, 0, 2, 0),
                                (0, 253, 0, 0, 1),
                                (0, 254, 0, 1, 1),
                                (0, 255, 0, 2, 1),
                                (0, 0, 253, 0, 2),
                                (0, 0, 254, 1, 2),
                                (0, 0, 255, 2, 2),
                            ],
                        ),
                    ],
                ),
                ts.Subtask(
                    "b",
                    marks=Fraction(3, 2),
                    function_name="pixels2image",
                    description="Pixelliste zur√ºckkonvertieren",
                    test_cases=[
                        ts.TestCase(
                            ([(0, 0, 0, 0, 0)],), np.array([[[0, 0, 0]]], dtype="uint8")
                        ),
                        ts.TestCase(
                            ([(1, 2, 3, 0, 0)],), np.array([[[1, 2, 3]]], dtype="uint8")
                        ),
                        ts.TestCase(
                            ([(1, 2, 3, 0, 0), (4, 5, 6, 0, 1)],),
                            np.array([[[1, 2, 3]], [[4, 5, 6]]], dtype="uint8"),
                        ),
                        ts.TestCase(
                            ([(4, 5, 6, 0, 1), (1, 2, 3, 0, 0)],),
                            np.array([[[1, 2, 3]], [[4, 5, 6]]], dtype="uint8"),
                        ),
                        ts.TestCase(
                            (
                                [
                                    (255, 0, 0, 0, 0),
                                    (0, 255, 0, 1, 0),
                                    (0, 0, 255, 2, 0),
                                ],
                            ),
                            np.array(
                                [[[255, 0, 0], [0, 255, 0], [0, 0, 255]]], dtype="uint8"
                            ),
                        ),
                        ts.TestCase(
                            (
                                [
                                    (0, 0, 0, 0, 0),
                                    (1, 0, 0, 1, 0),
                                    (0, 1, 0, 0, 1),
                                    (1, 1, 0, 1, 1),
                                    (0, 2, 0, 0, 2),
                                    (1, 2, 0, 1, 2),
                                ],
                            ),
                            np.array(
                                [
                                    [[0, 0, 0], [1, 0, 0]],
                                    [[0, 1, 0], [1, 1, 0]],
                                    [[0, 2, 0], [1, 2, 0]],
                                ],
                                dtype="uint8",
                            ),
                        ),
                        ts.TestCase(
                            (
                                [
                                    (1, 0, 0, 1, 0),
                                    (0, 0, 0, 0, 0),
                                    (1, 1, 0, 1, 1),
                                    (0, 1, 0, 0, 1),
                                    (1, 2, 0, 1, 2),
                                    (0, 2, 0, 0, 2),
                                ],
                            ),
                            np.array(
                                [
                                    [[0, 0, 0], [1, 0, 0]],
                                    [[0, 1, 0], [1, 1, 0]],
                                    [[0, 2, 0], [1, 2, 0]],
                                ],
                                dtype="uint8",
                            ),
                        ),
                        ts.TestCase(
                            (
                                [
                                    (253, 0, 0, 0, 0),
                                    (254, 0, 0, 1, 0),
                                    (255, 0, 0, 2, 0),
                                    (0, 253, 0, 0, 1),
                                    (0, 254, 0, 1, 1),
                                    (0, 255, 0, 2, 1),
                                    (0, 0, 253, 0, 2),
                                    (0, 0, 254, 1, 2),
                                    (0, 0, 255, 2, 2),
                                ],
                            ),
                            np.array(
                                [
                                    [[253, 0, 0], [254, 0, 0], [255, 0, 0]],
                                    [[0, 253, 0], [0, 254, 0], [0, 255, 0]],
                                    [[0, 0, 253], [0, 0, 254], [0, 0, 255]],
                                ],
                                dtype="uint8",
                            ),
                        ),
                        ts.TestCase(
                            (
                                [
                                    (0, 0, 253, 0, 2),
                                    (0, 0, 254, 1, 2),
                                    (0, 0, 255, 2, 2),
                                    (0, 253, 0, 0, 1),
                                    (0, 254, 0, 1, 1),
                                    (0, 255, 0, 2, 1),
                                    (253, 0, 0, 0, 0),
                                    (254, 0, 0, 1, 0),
                                    (255, 0, 0, 2, 0),
                                ],
                            ),
                            np.array(
                                [
                                    [[253, 0, 0], [254, 0, 0], [255, 0, 0]],
                                    [[0, 253, 0], [0, 254, 0], [0, 255, 0]],
                                    [[0, 0, 253], [0, 0, 254], [0, 0, 255]],
                                ],
                                dtype="uint8",
                            ),
                        ),
                        ts.TestCase(
                            (
                                [
                                    (0, 0, 253, 0, 2),
                                    (0, 0, 254, 1, 0),
                                    (0, 0, 255, 2, 2),
                                    (0, 253, 0, 2, 1),
                                    (0, 254, 0, 1, 1),
                                    (0, 255, 0, 0, 1),
                                    (253, 0, 0, 0, 0),
                                    (254, 0, 0, 1, 2),
                                    (255, 0, 0, 2, 0),
                                ],
                            ),
                            np.array(
                                [
                                    [[253, 0, 0], [0, 0, 254], [255, 0, 0]],
                                    [[0, 255, 0], [0, 254, 0], [0, 253, 0]],
                                    [[0, 0, 253], [254, 0, 0], [0, 0, 255]],
                                ],
                                dtype="uint8",
                            ),
                        ),
                    ],
                ),
                ts.Subtask(
                    "c",
                    marks=Fraction(3, 2),
                    function_name="bounding_box",
                    description="Kleinster umgebender Quader",
                    test_cases=[
                        ts.TestCase(([(1, 2, 3, 0, 0)],), ((1, 1), (2, 2), (3, 3))),
                        ts.TestCase(
                            ([(1, 2, 3, 0, 0), (3, 2, 1, 1, 0)],),
                            ((1, 3), (2, 2), (1, 3)),
                        ),
                        ts.TestCase(
                            (
                                [
                                    (1, 2, 3, 0, 0),
                                    (2, 3, 4, 1, 0),
                                    (0, 0, 0, 0, 1),
                                    (4, 4, 4, 1, 1),
                                ],
                            ),
                            ((0, 4), (0, 4), (0, 4)),
                        ),
                        ts.TestCase(
                            (
                                [
                                    (0, 1, 253, 0, 2),
                                    (0, 2, 254, 1, 2),
                                    (0, 1, 255, 2, 2),
                                    (253, 1, 0, 0, 0),
                                    (254, 1, 0, 1, 0),
                                    (255, 1, 0, 2, 0),
                                ],
                            ),
                            ((0, 255), (1, 2), (0, 255)),
                        ),
                        ts.TestCase(
                            (
                                [
                                    (0, 0, 253, 0, 2),
                                    (0, 0, 254, 1, 2),
                                    (0, 0, 255, 2, 2),
                                    (0, 253, 0, 0, 1),
                                    (0, 254, 0, 1, 1),
                                    (0, 255, 0, 2, 1),
                                    (253, 0, 0, 0, 0),
                                    (254, 0, 0, 1, 0),
                                    (255, 0, 0, 2, 0),
                                ],
                            ),
                            ((0, 255), (0, 255), (0, 255)),
                        ),
                    ],
                ),
                ts.Subtask(
                    "d",
                    marks=Fraction(3, 2),
                    function_name="color_average",
                    description="Durchschnittsfarbe",
                    test_cases=[
                        ts.TestCase(([(0, 0, 0, 0, 0)],), (0, 0, 0)),
                        ts.TestCase(([(0, 0, 0, 0, 0), (1, 1, 1, 1, 0)],), (0, 0, 0)),
                        ts.TestCase(([(0, 0, 0, 0, 0), (2, 2, 2, 1, 0)],), (1, 1, 1)),
                        ts.TestCase(([(1, 1, 1, 0, 0), (2, 2, 2, 1, 0)],), (2, 2, 2)),
                        ts.TestCase(([(1, 1, 1, 0, 0), (3, 3, 3, 1, 0)],), (2, 2, 2)),
                        ts.TestCase(
                            (
                                [
                                    (3, 1, 253, 0, 2),
                                    (0, 2, 254, 1, 2),
                                    (0, 1, 255, 2, 2),
                                    (253, 1, 0, 0, 0),
                                    (254, 1, 0, 1, 0),
                                    (255, 1, 0, 2, 0),
                                ],
                            ),
                            (128, 1, 127),
                        ),
                        ts.TestCase(
                            (
                                [
                                    (0, 0, 0, 0, 0),
                                    (0, 0, 0, 1, 0),
                                    (255, 255, 255, 0, 1),
                                    (255, 255, 255, 1, 1),
                                ],
                            ),
                            (128, 128, 128),
                        ),
                    ],
                ),
            ],
        ),
        ts.Task(
            2,
            "mcut",
            description="Median Cut",
            allowed_imports={"numpy", "matplotlib.pyplot", "imgutils"},
            subtasks=[
                ts.Subtask(
                    "a",
                    marks=Fraction(2),
                    function_name="cut_dimension",
                    description="Schnittdimension",
                    test_cases=[
                        ts.TestCase((((1, 1), (2, 2), (3, 3)),), 0),
                        ts.TestCase((((1, 1), (2, 3), (3, 4)),), 1),
                        ts.TestCase((((1, 1), (2, 3), (4, 6)),), 2),
                        ts.TestCase((((1, 9), (2, 3), (4, 6)),), 0),
                        ts.TestCase((((1, 9), (2, 255), (4, 6)),), 1),
                        ts.TestCase((((100, 105), (90, 99), (95, 105)),), 2),
                    ],
                ),
                ts.Subtask(
                    "b",
                    marks=Fraction(4),
                    function_name="recursive_median_cut",
                    description="Rekursive Unterteilung",
                    test_cases=[
                        ts.TestCase(([], 100), []),
                        ts.TestCase(([(0, 0, 0, 0, 0)], 100), [(0, 0, 0, 0, 0)]),
                        ts.TestCase(
                            (
                                (
                                    [
                                        (0, 0, 0, 0, 0),
                                        (1, 1, 1, 1, 0),
                                        (2, 2, 2, 2, 0),
                                        (3, 3, 3, 3, 0),
                                    ]
                                ),
                                1,
                                False,
                            ),
                            [
                                (0, 0, 0, 0, 0),
                                (0, 0, 0, 1, 0),
                                (2, 2, 2, 2, 0),
                                (2, 2, 2, 3, 0),
                            ],
                        ),
                        ts.TestCase(
                            (
                                (
                                    [
                                        (0, 0, 0, 0, 0),
                                        (1, 1, 1, 1, 0),
                                        (2, 2, 2, 2, 0),
                                        (3, 3, 3, 3, 0),
                                    ]
                                ),
                                1,
                                ((0, 3), (0, 3), (0, 3)),
                            ),
                            [
                                (0, 0, 0, 0, 0),
                                (0, 0, 0, 1, 0),
                                (2, 2, 2, 2, 0),
                                (2, 2, 2, 3, 0),
                            ],
                        ),
                    ],
                ),
                ts.Subtask(
                    "c",
                    marks=Fraction(1),
                    function_name="median_cut",
                    description="Anwendung auf NumPy-Arrays",
                    test_cases=[
                        ts.TestCase(
                            (np.array([[[5, 5, 3]]]), 1), np.array([[[5, 5, 3]]])
                        ),
                        ts.TestCase(
                            (np.array([[[5, 5, 3]]]), 4), np.array([[[5, 5, 3]]])
                        ),
                        ts.TestCase(
                            (np.array([[[0, 0, 0], [1, 1, 1], [2, 2, 2]]]), 1),
                            np.array([[[0, 0, 0], [2, 2, 2], [2, 2, 2]]]),
                        ),
                        ts.TestCase(
                            (
                                np.array(
                                    [[[0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3]]]
                                ),
                                1,
                            ),
                            np.array([[[0, 0, 0], [0, 0, 0], [2, 2, 2], [2, 2, 2]]]),
                        ),
                        ts.TestCase(
                            (
                                np.array(
                                    [[[0, 0, 0], [0, 0, 0]], [[2, 2, 2], [2, 3, 2]]]
                                ),
                                1,
                            ),
                            np.array([[[0, 0, 0], [0, 0, 0]], [[2, 2, 2], [2, 2, 2]]]),
                        ),
                        ts.TestCase(
                            (
                                np.array(
                                    [[[0, 0, 0], [0, 0, 0]], [[2, 2, 2], [2, 5, 2]]]
                                ),
                                1,
                            ),
                            np.array([[[0, 0, 0], [0, 0, 0]], [[2, 4, 2], [2, 4, 2]]]),
                        ),
                        ts.TestCase(
                            (
                                np.array(
                                    [[[0, 0, 0], [0, 0, 0]], [[2, 2, 2], [2, 3, 2]]]
                                ),
                                2,
                            ),
                            np.array([[[0, 0, 0], [0, 0, 0]], [[2, 2, 2], [2, 3, 2]]]),
                        ),
                        ts.TestCase(
                            (
                                np.array(
                                    [
                                        [[0, 0, 0], [128, 128, 128]],
                                        [[255, 255, 255], [192, 64, 221]],
                                    ]
                                ),
                                2,
                            ),
                            np.array(
                                [
                                    [[0, 0, 0], [128, 128, 128]],
                                    [[255, 255, 255], [192, 64, 221]],
                                ]
                            ),
                        ),
                        ts.TestCase(
                            (
                                np.array(
                                    [
                                        [
                                            [155, 21, 163],
                                            [53, 122, 224],
                                            [26, 237, 155],
                                        ],
                                        [[173, 166, 73], [87, 46, 129], [106, 69, 192]],
                                    ]
                                ),
                                2,
                            ),
                            np.array(
                                [
                                    [[130, 45, 178], [40, 180, 190], [40, 180, 190]],
                                    [[173, 166, 73], [87, 46, 129], [130, 45, 178]],
                                ]
                            ),
                        ),
                    ],
                ),
            ],
        ),
        ts.Task(
            3,
            "kmeans",
            description="K-Means Clustering",
            allowed_imports={"numpy", "matplotlib.pyplot", "imgutils"},
            subtasks=[
                ts.Subtask(
                    "a",
                    marks=Fraction(2),
                    function_name="compute_means",
                    description="Durchschnitte",
                    test_cases=[
                        ts.TestCase(([[(0, 0, 0, 0, 0)]],), [(0, 0, 0)]),
                        ts.TestCase(([[(1, 0, 0, 0, 0)]],), [(1, 0, 0)]),
                        ts.TestCase(
                            ([[(1, 2, 3, 0, 0), (4, 5, 6, 0, 1)]],), [(2, 4, 4)]
                        ),
                        ts.TestCase(
                            ([[(0, 0, 0, 0, 0)], [(1, 0, 0, 0, 0)]],),
                            [(0, 0, 0), (1, 0, 0)],
                        ),
                        ts.TestCase(
                            (
                                [
                                    [
                                        (3, 1, 253, 0, 2),
                                        (0, 2, 254, 1, 2),
                                        (0, 1, 255, 2, 2),
                                    ],
                                    [
                                        (253, 1, 0, 0, 0),
                                        (254, 1, 0, 1, 0),
                                        (255, 1, 0, 2, 0),
                                    ],
                                ],
                            ),
                            [(1, 1, 254), (254, 1, 0)],
                        ),
                    ],
                ),
                ts.Subtask(
                    "b",
                    marks=Fraction(3),
                    function_name="compute_clusters",
                    description="Cluster Berechnen",
                    test_cases=[
                        ts.TestCase(
                            ([(0, 0, 0, 0, 0)], [(0, 0, 0)]), [[(0, 0, 0, 0, 0)]]
                        ),
                        ts.TestCase(
                            (
                                [(0, 0, 0, 0, 0), (0, 0, 0, 1, 0)],
                                [(0, 0, 0), (1, 1, 1)],
                            ),
                            [[(0, 0, 0, 0, 0), (0, 0, 0, 1, 0)], []],
                        ),
                        ts.TestCase(
                            (
                                [
                                    (0, 0, 0, 0, 0),
                                    (1, 0, 0, 1, 0),
                                    (0, 1, 0, 0, 1),
                                    (1, 1, 0, 1, 1),
                                    (0, 2, 0, 0, 2),
                                    (1, 2, 0, 1, 2),
                                ],
                                [(0, 0, 0), (1, 1, 0)],
                            ),
                            [
                                [(0, 0, 0, 0, 0), (1, 0, 0, 1, 0), (0, 1, 0, 0, 1)],
                                [(1, 1, 0, 1, 1), (0, 2, 0, 0, 2), (1, 2, 0, 1, 2)],
                            ],
                        ),
                        ts.TestCase(
                            (
                                [
                                    (0, 0, 0, 0, 0),
                                    (1, 0, 0, 1, 0),
                                    (0, 1, 0, 0, 1),
                                    (1, 1, 0, 1, 1),
                                    (0, 2, 0, 0, 2),
                                    (1, 2, 0, 1, 2),
                                ],
                                [(0, 0, 0), (1, 2, 0)],
                            ),
                            [
                                [(0, 0, 0, 0, 0), (1, 0, 0, 1, 0), (0, 1, 0, 0, 1)],
                                [(1, 1, 0, 1, 1), (0, 2, 0, 0, 2), (1, 2, 0, 1, 2)],
                            ],
                        ),
                        ts.TestCase(
                            (
                                [
                                    (0, 0, 253, 0, 2),
                                    (0, 0, 254, 1, 2),
                                    (0, 0, 255, 2, 2),
                                    (0, 253, 0, 0, 1),
                                    (0, 254, 0, 1, 1),
                                    (0, 255, 0, 2, 1),
                                    (14, 0, 0, 0, 0),
                                    (13, 0, 0, 1, 0),
                                    (12, 0, 0, 2, 0),
                                ],
                                [(0, 0, 253), (0, 253, 0), (14, 0, 0)],
                            ),
                            [
                                [
                                    (0, 0, 253, 0, 2),
                                    (0, 0, 254, 1, 2),
                                    (0, 0, 255, 2, 2),
                                ],
                                [
                                    (0, 253, 0, 0, 1),
                                    (0, 254, 0, 1, 1),
                                    (0, 255, 0, 2, 1),
                                ],
                                [(14, 0, 0, 0, 0), (13, 0, 0, 1, 0), (12, 0, 0, 2, 0)],
                            ],
                        ),
                        ts.TestCase(
                            (
                                [
                                    (0, 0, 253, 0, 2),
                                    (0, 0, 254, 1, 2),
                                    (0, 0, 255, 2, 2),
                                    (0, 253, 0, 0, 1),
                                    (0, 254, 0, 1, 1),
                                    (0, 255, 0, 2, 1),
                                    (14, 0, 0, 0, 0),
                                    (13, 0, 0, 1, 0),
                                    (12, 0, 0, 2, 0),
                                ],
                                [(0, 0, 254), (0, 254, 0), (13, 0, 0)],
                            ),
                            [
                                [
                                    (0, 0, 253, 0, 2),
                                    (0, 0, 254, 1, 2),
                                    (0, 0, 255, 2, 2),
                                ],
                                [
                                    (0, 253, 0, 0, 1),
                                    (0, 254, 0, 1, 1),
                                    (0, 255, 0, 2, 1),
                                ],
                                [(14, 0, 0, 0, 0), (13, 0, 0, 1, 0), (12, 0, 0, 2, 0)],
                            ],
                        ),
                    ],
                ),
                ts.Subtask(
                    "c",
                    marks=Fraction(2),
                    function_name="averaged_pixels",
                    description="Gemittelte Pixelliste",
                    test_cases=[
                        ts.TestCase(
                            (
                                [
                                    [
                                        (255, 0, 0, 0, 0),
                                        (0, 0, 255, 2, 0),
                                        (0, 255, 0, 1, 0),
                                    ]
                                ],
                                [(85, 85, 85)],
                            ),
                            [
                                (85, 85, 85, 0, 0),
                                (85, 85, 85, 2, 0),
                                (85, 85, 85, 1, 0),
                            ],
                        ),
                        ts.TestCase(
                            (
                                [
                                    [(255, 0, 0, 0, 0), (0, 0, 255, 2, 0)],
                                    [(0, 255, 0, 1, 0)],
                                ],
                                [(128, 0, 128), (0, 255, 0)],
                            ),
                            [
                                (128, 0, 128, 0, 0),
                                (128, 0, 128, 2, 0),
                                (0, 255, 0, 1, 0),
                            ],
                        ),
                        ts.TestCase(
                            (
                                [
                                    [
                                        (0, 0, 253, 0, 2),
                                        (0, 0, 254, 1, 0),
                                        (0, 0, 255, 2, 2),
                                    ],
                                    [
                                        (0, 253, 0, 2, 1),
                                        (0, 254, 0, 1, 1),
                                        (0, 255, 0, 0, 1),
                                    ],
                                    [
                                        (253, 0, 0, 0, 0),
                                        (254, 0, 0, 1, 2),
                                        (255, 0, 0, 2, 0),
                                    ],
                                ],
                                [(0, 0, 254), (0, 254, 0), (254, 0, 0)],
                            ),
                            [
                                (0, 0, 254, 0, 2),
                                (0, 0, 254, 1, 0),
                                (0, 0, 254, 2, 2),
                                (0, 254, 0, 2, 1),
                                (0, 254, 0, 1, 1),
                                (0, 254, 0, 0, 1),
                                (254, 0, 0, 0, 0),
                                (254, 0, 0, 1, 2),
                                (254, 0, 0, 2, 0),
                            ],
                        ),
                        ts.TestCase(
                            (
                                [
                                    [
                                        (0, 0, 253, 0, 2),
                                        (0, 0, 254, 1, 2),
                                        (0, 0, 255, 2, 2),
                                    ],
                                    [
                                        (0, 253, 0, 0, 1),
                                        (0, 254, 0, 1, 1),
                                        (0, 255, 0, 2, 1),
                                    ],
                                    [
                                        (14, 0, 0, 0, 0),
                                        (13, 0, 0, 1, 0),
                                        (12, 0, 0, 2, 0),
                                    ],
                                ],
                                [(0, 0, 254), (0, 254, 0), (13, 0, 0)],
                            ),
                            [
                                (0, 0, 254, 0, 2),
                                (0, 0, 254, 1, 2),
                                (0, 0, 254, 2, 2),
                                (0, 254, 0, 0, 1),
                                (0, 254, 0, 1, 1),
                                (0, 254, 0, 2, 1),
                                (13, 0, 0, 0, 0),
                                (13, 0, 0, 1, 0),
                                (13, 0, 0, 2, 0),
                            ],
                        ),
                    ],
                ),
            ],
        ),
    ],
)


def jupyter_run_tests(*tasknames: str):
    src_dir = pathlib.Path(__file__).parent
    ts.TestDriver(sheet, src_dir).run_jupyter(tasknames)


if __name__ == "__main__":
    src_dir = pathlib.Path.cwd()
    ts.TestDriver(sheet, src_dir).run_cli()
